const { SlashCommandBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const kimoIDMaker = require('../patterns/kimoIDMaker');
const UserData = require('../models/userData');
const cost = 10;

const cooldowns = new Map();
const cooldownAmount = 1000 * 60 * 10;

module.exports = {
    data: new SlashCommandBuilder()
    .setName('flip')
    .setDescription('flip someone, costs 10 shells')
    .addUserOption(option =>
        option
            .setName('target')
            .setDescription('target to flip (costs 10 shells)')
            .setRequired(true)),

    async execute(interaction, client) {

        await interaction.deferReply();

        // QUEST NPC ROLE CHECK
        if (!interaction.member.roles.cache.get('1221051301996007465')) return interaction.editReply({ content: 'You need to be a sumo to use this.', ephemeral: true });

        const now = Date.now();
        if (cooldowns.has(interaction.member.user.id)) {
            const expirationTime = cooldowns.get(interaction.member.user.id) + cooldownAmount;

            if (now < expirationTime) {
              const timeLeft = (expirationTime - now) / 1000 / 60;
              return interaction.editReply({ content: `Please wait ${timeLeft.toFixed(1)} more minutes before flipping again`, ephemeral: true});
            }
        }

        const userWallet = await UserData.findOne({ userID: interaction.member.id });
        if (userWallet.money < cost) return interaction.editReply({ content: `Insufficient shells, you need ${cost} shells to use this.`, ephemeral: true });
        userWallet.money -= cost;
        await userWallet.save();

        const jianDaoWallet = await UserData.findOne({ userID: '1202895682630066216' });
        jianDaoWallet.money += cost;
        await jianDaoWallet.save();

        cooldowns.set(interaction.member.user.id, now);

        const target = interaction.options.getMember('target');

        const oldName = target.displayName;

        const targetName = upsideDownText(oldName);

        target.setNickname(targetName);

        
        const response = await interaction.channel.send ('https://tenor.com/view/akua-terutsuyoshi-kakenage-sumo-gif-25170050');
        setTimeout(() => {
            response.delete();
        }, 10 * 1000);

        interaction.editReply({ content: `${oldName} has been flipped! Their new name is ${targetName}`, ephemeral: false });

    },
  };

  function upsideDownText(text) {
    const upsideDownChars = {
        a: '…ê',
        b: 'q',
        c: '…î',
        d: 'p',
        e: '«ù',
        f: '…ü',
        g: '∆É',
        h: '…•',
        i: 'ƒ±',
        j: '…æ',
        k: ' û',
        l: 'l',
        m: '…Ø',
        n: 'u',
        o: 'o',
        p: 'd',
        q: 'b',
        r: '…π',
        s: 's',
        t: ' á',
        u: 'n',
        v: ' å',
        w: ' ç',
        x: 'x',
        y: ' é',
        z: 'z',
        A: '‚àÄ',
        B: 'êêí',
        C: '∆Ü',
        D: '‚óñ',
        E: '∆é',
        F: '‚Ñ≤',
        G: '◊§',
        H: 'H',
        I: 'I',
        J: '≈ø',
        K: '‚ãä',
        L: '‚ÖÉ',
        M: 'W',
        N: 'N',
        O: 'O',
        P: '‘Ä',
        Q: 'Œå',
        R: '·¥ö',
        S: 'S',
        T: '‚ä•',
        U: '‚à©',
        V: 'Œõ',
        W: 'M',
        X: 'X',
        Y: ' é',
        Z: 'Z',
        0: '0',
        1: '∆ñ',
        2: '·ÑÖ',
        3: '∆ê',
        4: '„Ñ£',
        5: 'œõ',
        6: '9',
        7: '„Ñ•',
        8: '8',
        9: '6',
        '.': 'Àô',
        ',': "'",
        '?': '¬ø',
        '!': '¬°',
        "'": ',',
        '"': ',,',
        '`': ',',
        '^': 'v',
        '<': '>',
        '>': '<',
        '‚à¥': '‚àµ'
    };
    
    const chars = text.split('');
    let upsideDownText = '';
    for (let char of chars) {
        upsideDownText += upsideDownChars[char] || char;
    }
    return upsideDownText.split('').reverse().join('');
}